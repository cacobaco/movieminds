@using Movieminds.Client.Services;
@using Movieminds.Presentation.Responses.Movies;

@inject MovieService MovieService;

<div class="d-flex flex-column justify-content-center overflow-x-hidden" style="width: 250px;">
    @if (MovieResponses is not null)
    {
        @if (MovieResponses.Count() < 1)
        {
            <h3 class="text-center">Nenhuma tendência encontrada</h3>
        }
        else
        {
            @foreach (var movieResponse in MovieResponses)
            {
                <TrendingMovie MovieResponse="@movieResponse" />
            }
        }
    }
    else if (ErrorMessage is not null)
    {
        <h3 class="text-center">@ErrorMessage</h3>
    }
    else
    {
        <Loading />
    }
</div>

@code {
    private IEnumerable<MovieResponse>? MovieResponses;

    private string _errorMessage;
    private string ErrorMessage
    {
        get => _errorMessage;
        set
        {
            _errorMessage = value;
            StateHasChanged();
        }
    }
    protected override async Task OnInitializedAsync()
    {
        var response = await MovieService.GetTrendingMoviesAsync();
        if (!response.Success || response.Data is null)
        {
            ErrorMessage = response.Message;
            return;
        }

        MovieResponses = response.Data;
        StateHasChanged();
    }
}
