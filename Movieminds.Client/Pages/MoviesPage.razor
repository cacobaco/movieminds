@page "/movies"

@using Movieminds.Client.Components;
@using Movieminds.Client.Components.Movies;
@using Movieminds.Client.Services;
@using Movieminds.Presentation.Responses;
@using Movieminds.Presentation.Responses.Movies;
@using Movieminds.Client.Enums;

@inject MovieService MovieService;
@inject IJSRuntime JSRuntime;

<PageTitle>Filmes</PageTitle>

<div class="p-4 pb-0 d-flex flex-column align-items-center" style="min-width: 100%; height: 100vh;">
    <div class="d-flex align-items-center justify-content-center" style="min-width: 100%;">
        <Searchbar OnChange="OnSearch" />
    </div>

    <div class="mb-3">
        <label for="inputSortBy" class="form-label">Ordenação</label>
        <InputSelect id="inputSortBy" class="form-select" @bind-Value="SortBy"
            disabled="@(!string.IsNullOrEmpty(SearchValue))">
            <option value="popularity.desc" selected>Popularidade - Descrescente</option>
            <option value="popularity.asc">Popularidade - Crescente</option>
            <option value="original_title.desc">Título - Decrescente</option>
            <option value="original_title.asc">Título - Crescente</option>
            <option value="primary_release_date.desc">Data de lançamento - Decrescente</option>
            <option value="primary_release_date.asc">Data de lançamento - Crescente</option>
        </InputSelect>
    </div>

    <div class="mb-3">
        @if (MovieResponses is not null && LastMovieResponses is not null)
        {
            <small>Mostrando @MovieResponses.Count() de @LastMovieResponses.TotalRecords
                resultados</small>
        }
        else if (MovieResponses is not null)
        {
            <small>Mostrando @MovieResponses.Count() resultados</small>
        }
        else
        {
            <small>Sem resultados</small>
        }
    </div>

    <div class="pt-5 row overflow-y-scroll overflow-x-hidden" id="movieScrollDiv">
        @if (MovieResponses is not null)
        {
            @if (MovieResponses.Count() < 1)
            {
                <h1>Sem resultados</h1>
            }
            else
            {
                @foreach (var MovieResponse in MovieResponses)
                {
                    <div class="col-3">
                        <MovieCard MovieResponse="@MovieResponse" />
                    </div>
                }
            }
        }
        else if (ErrorMessage is not null)
        {
            <h1>@ErrorMessage</h1>
        }
        else
        {
            <div class="d-flex justify-content-center">
                <Loading />
            </div>
        }

        @if (MovieResponses is not null && IsLoading)
        {
            <div class="d-flex justify-content-center">
                <Loading />
            </div>
        }
    </div>
</div>

@code {
    private bool _isLoading = false;
    private bool IsLoading
    {
        get => _isLoading;
        set
        {
            _isLoading = value;
            StateHasChanged();
        }
    }

    private PaginatedResponse<MovieResponse>? LastMovieResponses;
    private IEnumerable<MovieResponse>? MovieResponses;
    private ElementReference? ScrollElement;

    private int PageSize = 20;
    private int CurrentPage = 1;

    private string _sortBy = "popularity.desc";
    private string SortBy
    {
        get => _sortBy;
        set
        {
            _sortBy = value;
            CurrentPage = 1;
            MovieResponses = null;
            LoadMoreMovies();
        }
    }

    private string _searchValue = "";
    private string SearchValue
    {
        get => _searchValue;
        set
        {
            _searchValue = value;
            CurrentPage = 1;
            MovieResponses = null;
            LoadMoreMovies();
        }
    }

    private string? _errorMessage;
    private string? ErrorMessage
    {
        get => _errorMessage;
        set
        {
            _errorMessage = value;
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadMoreMovies();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("blazorInterop.subscribeElementScrollEnd", "#movieScrollDiv", "OnElementScrollEnd",
            DotNetObjectReference.Create(this));
        }
    }

    [JSInvokable]
    public async Task OnElementScrollEnd()
    {
        if (LastMovieResponses.Data is null || LastMovieResponses.Data.Count() < PageSize)
        {
            return;
        }
        await LoadMoreMovies();
    }

    private async Task OnSearch(string searchValue)
    {

        SearchValue = searchValue;
    }

    private async Task LoadMoreMovies()
    {
        if (IsLoading)
        {
            return;
        }
        IsLoading = true;

        var response = await MovieService.GetMoviesAsync(CurrentPage++, SortBy, SearchValue);
        if (!response.Success || response.Data is null)
        {
            ErrorMessage = response.Message;
            return;
        }

        if (MovieResponses is null)
        {
            MovieResponses = [];
        }

        LastMovieResponses = response;
        MovieResponses = MovieResponses.Union(LastMovieResponses.Data);
        IsLoading = false;
        StateHasChanged();
    }
}
